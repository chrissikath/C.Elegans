Locations of lat-1 [..] On Chromosom II (+) strand		
		
	Start	End
5'UTR	8896839	8896878
Exon 1	8896879	8896987
Exon 2	8899798	8899984
Exon 3A	8903607	8903719
Exon 3B	8903388	8903494
Exon 4	8903844	8903929
Exon 5	8904012	8905264
Exon 6	8906060	8906846
Exon 7	8907152	8907287
Exon 8	8907725	8908098
		
		
Start = 1.Base in UTR/ Exon, End: last base in Exon/UTR		

----------------------------------------------------------------

-f INT
Only output alignments with all bits set in INT present in the FLAG field. INT can be specified in hex by beginning with `0x' (i.e. /^0x[0-9A-F]+/) or in octal by beginning with `0' (i.e. /^0[0-7]+/) [0].


-------------------
https://broadinstitute.github.io/picard/explain-flags.html


Summary:
    mate unmapped (0x8)*

    *Warning: Flag(s) and 0x8 cannot be set when read is not paired


------------------------reference genome regions -----------------

@HD     VN:1.0  SO:coordinate 	VN=Version of SAM, SO=sort order of file
@SQ     SN:I    LN:15072434 	SN=sequence name, LN=length of sequence 
@SQ     SN:II   LN:15279421
@SQ     SN:III  LN:13783801
@SQ     SN:IV   LN:17493829
@SQ     SN:V    LN:20924180
@SQ     SN:X    LN:17718942
@SQ     SN:MtDNA        LN:13794
ID=program used ID, PN=program name, VN=version of hisat2, CL=?
@PG     ID:hisat2       PN:hisat2       VN:2.1.0        CL:"/usr/bin/hisat2-align-s --wrapper basic-0 -x /home/udo/genomes/c.elegans/wbps14/caenorhabditis_elegans.PRJNA13758.WBPS14.genomic -p 32 --dta -1 /tmp/906851.inpipe1 -2 /tmp/906851.inpipe2"

----------------------------- reads of the region that have unmapped mates -------------

for i in EG12*.bam; do( samtools view -f 0x8 $i II:8896839-8896878);done >5pUTR.txt
# none

$ path="/a/b/c/d/e/f/script1.sh"
$ echo "${path#*/c}"
/d/e/f/script1.sh

for i in /home/udo/worms/*.bam; do( samtools view -f 0x8 $i II:8896839-8896878);done >${i%.bam}_5pUTR_mapped.txt
# one sample has some
# writing down works only because it's one sample

# show the new file without path
for i in /home/udo/worms/*.bam; do( echo ${i#/home/udo/worms/}_ending);done
# works

------------- do all mapped with unmapped mate ------------

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8896839-8896878 >${i#/home/udo/worms/}_5pUTR_mapped.txt);done

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8896879-8896987 >${i#/home/udo/worms/}_Exon1_mapped.txt);done

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8899798-8899984 >${i#/home/udo/worms/}_Exon2_mapped.txt);done

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8903607-8903719 >${i#/home/udo/worms/}_Exon3A_mapped.txt);done

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8903388-8903494 >${i#/home/udo/worms/}_Exon3B_mapped.txt);done

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8903844-8903929 >${i#/home/udo/worms/}_Exon4_mapped.txt);done

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8904012-8905264 >${i#/home/udo/worms/}_Exon5_mapped.txt);done

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8906060-8906846 >${i#/home/udo/worms/}_Exon6_mapped.txt);done

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8907152-8907287 >${i#/home/udo/worms/}_Exon7_mapped.txt);done

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x8 $i II:8907725-8908098 >${i#/home/udo/worms/}_Exon8_mapped.txt);done

################################discarded this analysis !! unmaped would be too big########################
----------------------------do all unmapped that are pairs----------------

https://broadinstitute.github.io/picard/explain-flags.html
Summary:
    read paired (0x1)
    read unmapped (0x4)

-----------

for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x1 -f 0x4 $i >${i#/home/udo/worms/}_unmapped_paired.txt);done


--> get too big !!

################################discarded this analysis !! unmaped would be too big########################

https://broadinstitute.github.io/picard/explain-flags.html

no combi that fits the purpose

----------------------------------grep for the mates----------------------

-w, --word-regexp
Select only those lines containing matches that form whole words. The test is that the matching substring must either be at the beginning of the line, or preceded by a non-word constituent character. Similarly, it must be either at the end of the line or followed by a non-word constituent character. Word-constituent characters are letters, digits, and the underscore.

-F, --fixed-strings
Interpret PATTERN as a list of fixed strings, separated by newlines, any of which is to be matched. (-F is specified by POSIX .)

-f FILE, --file=FILE
Obtain patterns from FILE, one per line. The empty file contains zero patterns, and therefore matches nothing. (-f is specified by POSIX .)

# make list with all intersting (mapped read) IDs
cut -f 1 *mapped.txt | sort -u >all_mapped_IDs.txt

    read paired (0x1)
    read unmapped (0x4)
# view unmapped reads for a bam file
for i in /home/udo/worms/APR469--5*.bam; do( echo $i; samtools view -f 0x1 -f 0x4 $i);done

# view and grep unmapped mates
for i in /home/udo/worms/APR469--5*.bam; do( echo $i; samtools view -f 0x1 -f 0x4 $i | grep -w -F -f all_mapped_IDs.txt);done
# works, a given read can map to several exons and the one mate exists once in the unmapped grep output.

# view, grep unmapped mates, save to file per bam
for i in /home/udo/worms/*.bam; do( echo $i; samtools view -f 0x1 -f 0x4 $i | grep -w -F -f all_mapped_IDs.txt >${i#/home/udo/worms/}_unmapped_mates.txt);done


----------------------------------explanation-------------

The requested reads were output into .txt files in the SAM format. The reads are identified by their ID at the beginning of each entry.
Infos on the SAM format http://samtools.github.io/hts-specs/SAMv1.pdf page 6 gives:

Col Field Type Regexp/Range Brief description
1 QNAME String [!-?A-~]{1,254} Query template NAME
2 FLAG Int [0, 2
16 − 1] bitwise FLAG
3 RNAME String \*|[:rname:
*=][:rname:]* Reference sequence NAME11
4 POS Int [0, 2
31 − 1] 1-based leftmost mapping POSition
5 MAPQ Int [0, 2
8 − 1] MAPping Quality
6 CIGAR String \*|([0-9]+[MIDNSHPX=])+ CIGAR string
7 RNEXT String \*|=|[:rname:∧
*=][:rname:]* Reference name of the mate/next read
8 PNEXT Int [0, 2
31 − 1] Position of the mate/next read
9 TLEN Int [−2
31 + 1, 2
31 − 1] observed Template LENgth
10 SEQ String \*|[A-Za-z=.]+ segment SEQuence
11 QUAL String [!-~]+ ASCII of Phred-scaled base QUALity+33

The files ending on "_mapped.txt" contain reads that were mapped in the requested region an have unmapped mates, the other "side" of the sequenced molecule didn't map as expected.
The files ending on "_unmapped_mates.txt" contain the unmapped mates, i.e. reads that were paired to one of the former mapped reads, but unmapped. So these contain the 'other ends' of the requested reads per each sample. A given mapped read can map to several exons and hence, the one mate exists only once in the unmapped mates output.


